'use strict';

/**
 * Inputs Components
 * @desc includes input, input-group
 */

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var ReactDOM = require('react-dom');
var classNames = require('classnames');
var omit = require('object.omit');
var ClassNameMixin = require('./mixins/ClassNameMixin');
var FormGroup = require('./FormGroup');
var Button = require('./Button');
var Icon = require('./Icon');
var constants = require('./constants');

var Input = React.createClass({
  displayName: 'Input',

  mixins: [ClassNameMixin],

  propTypes: {
    type: React.PropTypes.string,
    disabled: React.PropTypes.bool,
    radius: React.PropTypes.bool,
    round: React.PropTypes.bool,
    amSize: React.PropTypes.oneOf(['sm', 'lg']),
    amStyle: React.PropTypes.string,
    validation: React.PropTypes.oneOf(['success', 'warning', 'error']),
    label: React.PropTypes.node,
    help: React.PropTypes.node,
    addonBefore: React.PropTypes.node,
    addonAfter: React.PropTypes.node,
    btnBefore: React.PropTypes.node,
    btnAfter: React.PropTypes.node,
    id: React.PropTypes.string,
    groupClassName: React.PropTypes.string,
    wrapperClassName: React.PropTypes.string,
    labelClassName: React.PropTypes.string,
    helpClassName: React.PropTypes.string,
    icon: React.PropTypes.string,
    standalone: React.PropTypes.bool,
    inline: React.PropTypes.bool,
    hasFeedback: React.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      type: 'text'
    };
  },

  getFieldDOMNode: function getFieldDOMNode() {
    return ReactDOM.findDOMNode(this.refs.field);
  },

  getValue: function getValue() {
    if (this.props.type === 'select' && this.props.multiple) {
      return this.getSelectedOptions();
    } else {
      return this.getFieldDOMNode().value;
    }
  },

  getChecked: function getChecked() {
    return this.getFieldDOMNode().checked;
  },

  getSelectedOptions: function getSelectedOptions() {
    var values = [];
    var options = this.getFieldDOMNode().getElementsByTagName('option');

    options.forEach(function (option) {
      if (option.selected) {
        var value = option.getAttribute('value') || option.innerHtml;

        values.push(value);
      }
    });

    return values;
  },

  isCheckboxOrRadio: function isCheckboxOrRadio() {
    return this.props.type === 'radio' || this.props.type === 'checkbox';
  },

  isFile: function isFile() {
    return this.props.type === 'file';
  },

  renderInput: function renderInput() {
    var input = null;
    var fieldClassName = this.isCheckboxOrRadio() || this.isFile() ? '' : this.setClassNamespace('form-field');
    var classSet = {};

    classSet[constants.CLASSES.round] = this.props.round;
    classSet[constants.CLASSES.radius] = this.props.radius;

    if (this.props.amSize && !this.props.standalone) {
      classSet[this.setClassNamespace('input-' + this.props.amSize)] = true;
    }

    var classes = classNames(this.props.className, fieldClassName, classSet);
    var props = omit(this.props, ['radius', 'round', 'amSize', 'amStyle', 'validation', 'label', 'help', 'addonBefore', 'addonAfter', 'btnBefore', 'btnAfter', 'groupClassName', 'wrapperClassName', 'labelClassName', 'helpClassName', 'icon', 'standalone', 'inline', 'hasFeedback']);

    switch (this.props.type) {
      case 'select':
        input = React.createElement(
          'select',
          _extends({}, props, {
            className: classes,
            ref: 'field',
            key: 'field'
          }),
          this.props.children
        );
        break;
      case 'textarea':
        input = React.createElement('textarea', _extends({}, props, {
          className: classes,
          ref: 'field',
          key: 'field'
        }));
        break;
      case 'submit':
      case 'reset':
        input = React.createElement(Button, _extends({}, props, {
          component: 'input',
          ref: 'field',
          key: 'field'
        }));
        break;
      default:
        input = React.createElement('input', _extends({}, props, {
          className: classes,
          ref: 'field',
          key: 'field'
        }));
    }

    return input;
  },

  // Input wrapper if wrapperClassName set
  renderWrapper: function renderWrapper(children) {
    return this.props.wrapperClassName ? React.createElement(
      'div',
      {
        className: this.props.wrapperClassName,
        key: 'wrapper'
      },
      children
    ) : children;
  },

  // Wrap block checkbox/radio
  renderCheckboxAndRadioWrapper: function renderCheckboxAndRadioWrapper(children) {
    // Don't wrap inline checkbox/radio
    return this.props.inline ? children : React.createElement(
      'div',
      {
        className: this.setClassNamespace(this.props.type),
        key: 'checkboxAndRadioWrapper'
      },
      children
    );
  },

  renderLabel: function renderLabel(children) {
    // label doesn't work with icon
    /*if (this.props.icon) {
      return null;
    }*/

    var classSet = {};

    if (this.isCheckboxOrRadio()) {
      // inline checkbox and radio
      classSet[this.setClassNamespace(this.props.type + '-inline')] = this.props.inline;
    } else {
      // normal form label
      classSet[this.setClassNamespace('form-label')] = true;
    }

    return this.props.label ? React.createElement(
      'label',
      {
        htmlFor: this.props.id,
        className: classNames(this.props.labelClassName, classSet),
        key: 'label'
      },
      children,
      this.props.label
    ) : children;
  },

  renderInputGroup: function renderInputGroup(children) {
    var groupPrefix = this.setClassNamespace('input-group');
    var addonClassName = groupPrefix + '-label';
    var btnClassName = groupPrefix + '-btn';
    var addonBefore = this.props.addonBefore ? React.createElement(
      'span',
      { className: addonClassName, key: 'addonBefore' },
      this.props.addonBefore
    ) : null;
    var addonAfter = this.props.addonAfter ? React.createElement(
      'span',
      { className: addonClassName, key: 'addonAfter' },
      this.props.addonAfter
    ) : null;
    var btnBefore = this.props.btnBefore ? React.createElement(
      'span',
      { className: btnClassName, key: 'btnBefore' },
      this.props.btnBefore
    ) : null;
    var btnAfter = this.props.btnAfter ? React.createElement(
      'span',
      { className: btnClassName, key: 'btnAfter' },
      this.props.btnAfter
    ) : null;
    var classSet = {};

    if (this.props.amSize) {
      classSet[groupPrefix + '-' + this.props.amSize] = true;
    }

    if (this.props.amStyle) {
      classSet[groupPrefix + '-' + this.props.amStyle] = true;
    }

    return addonBefore || addonAfter || btnBefore || btnAfter ? React.createElement(
      'div',
      {
        className: classNames(groupPrefix, classSet),
        key: 'inputGroup'
      },
      addonBefore,
      btnBefore,
      children,
      addonAfter,
      btnAfter
    ) : children;
  },

  // form help
  renderHelp: function renderHelp() {
    return this.props.help ? React.createElement(
      'p',
      {
        className: classNames(this.setClassNamespace('form-help'), this.props.helpClassName),
        key: 'help'
      },
      this.props.help
    ) : '';
  },

  renderIcon: function renderIcon() {
    var props = this.props;
    var feedbackIcon = {
      success: 'check',
      warning: 'warning',
      error: 'times'
    };
    var icon = props.icon || props.hasFeedback && props.validation && feedbackIcon[props.validation];

    return icon ? React.createElement(Icon, { icon: icon, key: 'icon' }) : null;
  },

  render: function render() {
    // standalone mode
    if (this.props.standalone) {
      return this.renderInput();
    }

    // render checkbox and radio, without FormGroup wrapper
    if (this.isCheckboxOrRadio()) {
      return this.renderWrapper(this.renderCheckboxAndRadioWrapper(this.renderLabel(this.renderInput())));
    }

    var groupClassName = classNames(this.props.type === 'select' ? this.setClassNamespace('form-select') : null, this.props.icon && this.setClassNamespace('form-icon'), this.props.groupClassName);

    return React.createElement(
      FormGroup,
      {
        className: groupClassName,
        validation: this.props.validation,
        amSize: this.props.amSize,
        hasFeedback: this.props.hasFeedback
      },
      [this.renderLabel(), this.renderWrapper(this.renderInputGroup(this.renderInput())), this.renderIcon(), this.renderHelp()]
    );
  }
});

module.exports = Input;