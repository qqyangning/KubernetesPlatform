'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var React = require('react');
var ReactDOM = require('react-dom');
var assign = require('object-assign');
var omit = require('object.omit');
var classNames = require('classnames');
var ClassNameMixin = require('./mixins/ClassNameMixin');
var Events = require('./utils/Events');
var debounce = require('./utils/debounce');
var domUtils = require('./utils/domUtils');
var canUseDOM = require('./utils/canUseDOM');

var Sticky = React.createClass({
  displayName: 'Sticky',

  mixins: [ClassNameMixin],

  propTypes: {
    classPrefix: React.PropTypes.string,
    media: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
    top: React.PropTypes.number,
    animation: React.PropTypes.string,
    bottom: React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.func])
  },

  getDefaultProps: function getDefaultProps() {
    return {
      classPrefix: 'sticky',
      top: 0
    };
  },

  getInitialState: function getInitialState() {
    return {
      sticked: false,
      holderStyle: null,
      initialized: false,
      stickerStyle: null
    };
  },

  componentDidMount: function componentDidMount() {
    if (canUseDOM) {
      this._init();
      this.checkPosition();
      var ownerWindow = domUtils.ownerWindow(ReactDOM.findDOMNode(this.refs.sticker));

      this._scrollListener = Events.on(ownerWindow, 'scroll', debounce(this.checkPosition, 10).bind(this));
      this._resizeListener = Events.on(ownerWindow, 'resize', debounce(this.checkPosition, 50).bind(this));
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._scrollListener && this._scrollListener.off();
    this._resizeListener && this._resizeListener.off();
  },

  _init: function _init() {
    if (this.state.initialized || !this.isMounted() || !this.checkMedia()) {
      return;
    }

    var sticker = ReactDOM.findDOMNode(this.refs.sticker);
    var elStyle = getComputedStyle(sticker);
    var outerHeight = parseInt(elStyle.height, 10) + parseInt(elStyle.marginTop, 10) + parseInt(elStyle.marginBottom, 10);
    var style = {
      height: elStyle.position !== 'absolute' ? outerHeight : '',
      float: elStyle.float !== 'none' ? elStyle.float : '',
      margin: elStyle.margin
    };

    this.setState({
      initialized: true,
      holderStyle: style,
      stickerStyle: {
        margin: 0
      }
    });
  },

  checkPosition: function checkPosition() {
    if (this.isMounted) {
      var scrollTop = domUtils.scrollTop(window);
      var offsetTop = this.props.top;
      var offsetBottom = this.props.bottom;
      var holder = ReactDOM.findDOMNode(this);

      if (typeof offsetBottom === 'function') {
        offsetBottom = offsetBottom();
      }

      var checkResult = scrollTop > domUtils.offset(holder).top;

      if (checkResult && !this.state.sticked) {
        this.setState({
          stickerStyle: {
            top: offsetTop,
            left: domUtils.offset(holder).left,
            width: holder.offsetWidth
          }
        });
      }

      if (this.state.sticked && !checkResult) {
        this.resetSticker();
      }

      this.setState({
        sticked: checkResult
      });
    }
  },

  checkMedia: function checkMedia() {
    // TODO: add element visible detector
    /*if (!this.$element.is(':visible')) {
     return false;
     }*/

    var media = this.props.media;

    if (media) {
      switch (typeof media === 'undefined' ? 'undefined' : _typeof(media)) {
        case 'number':
          if (window.innerWidth < media) {
            return false;
          }
          break;

        case 'string':
          if (window.matchMedia && !window.matchMedia(media).matches) {
            return false;
          }
          break;
      }
    }

    return true;
  },

  resetSticker: function resetSticker() {
    this.setState({
      stickerStyle: {
        position: '',
        top: '',
        width: '',
        left: '',
        margin: 0
      }
    });
  },

  // Smooth scroll
  handleClick: function handleClick(e) {
    e.preventDefault();

    if (e.target && e.target.nodeName === 'A') {
      var targetNode = document.getElementById(e.target.getAttribute('href').substr(1));

      targetNode && this.smoothScroll(window, {
        position: domUtils.offset(targetNode).top - this.props.offsetTop || 0
      });
    }
  },

  render: function render() {
    var stickyClass = this.getClassSet();
    var child = React.Children.only(this.props.children);
    var animation = this.props.animation && this.state.sticked ? this.setClassNamespace('animation-' + this.props.animation) : null;
    var restProps = omit(this.props, Object.keys(this.constructor.propTypes));

    // transfer child's props to cloned element
    return React.createElement(
      'div',
      _extends({}, restProps, {
        style: this.state.holderStyle,
        className: classNames(this.props.className, this.prefixClass('placeholder'))
      }),
      React.cloneElement(child, assign({}, child.props, {
        style: this.state.stickerStyle,
        ref: 'sticker',
        className: classNames(child.props.className, this.state.sticked ? stickyClass : null, animation)
      }))
    );
  }
});

module.exports = Sticky;