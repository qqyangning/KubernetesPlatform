'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var classNames = require('classnames');
var omit = require('object.omit');
var ClassNameMixin = require('./mixins/ClassNameMixin');

var Article = React.createClass({
  displayName: 'Article',

  mixins: [ClassNameMixin],

  propTypes: {
    classPrefix: React.PropTypes.string,
    title: React.PropTypes.node,
    meta: React.PropTypes.node,
    lead: React.PropTypes.node
  },

  getDefaultProps: function getDefaultProps() {
    return {
      classPrefix: 'article'
    };
  },

  render: function render() {
    var classSet = this.getClassSet();
    var restProps = omit(this.props, Object.keys(this.constructor.propTypes));

    return React.createElement(
      'article',
      _extends({}, restProps, {
        className: classNames(classSet, this.props.className)
      }),
      React.createElement(
        'header',
        { className: this.prefixClass('hd') },
        this.props.title ? React.createElement(
          Article.Child,
          { role: 'title' },
          this.props.title
        ) : null,
        this.props.meta ? React.createElement(
          Article.Child,
          { role: 'meta' },
          this.props.meta
        ) : null
      ),
      React.createElement(
        'div',
        { className: this.prefixClass('bd') },
        this.props.lead ? React.createElement(
          Article.Child,
          { role: 'lead' },
          this.props.lead
        ) : null,
        this.props.children
      )
    );
  }
});

Article.Child = React.createClass({
  displayName: 'Child',

  mixins: [ClassNameMixin],

  propTypes: {
    role: React.PropTypes.string.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      role: 'title'
    };
  },

  render: function render() {
    var role = this.props.role;
    var restProps = omit(this.props, Object.keys(this.constructor.propTypes));
    var Component;
    var classes = classNames(this.props.className, this.setClassNamespace('article-' + role));

    switch (role) {
      case 'meta':
      case 'lead':
        Component = 'p';
        break;
      case 'title':
        Component = 'h1';
        break;
      default:
        Component = 'div';
    }

    return role === 'divider' ? React.createElement('hr', _extends({}, restProps, {
      className: classes
    })) : React.createElement(
      Component,
      _extends({}, restProps, {
        className: classes
      }),
      this.props.children
    );
  }
});

module.exports = Article;