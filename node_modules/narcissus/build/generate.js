'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
y the way, the whole point here is to be able to write nested css declarations
et's not forget that


var _static = require('inline-style-prefixer/static');

var _static2 = _interopRequireDefault(_static);

var _isUnitlessNumber = require('./isUnitlessNumber');

var _isUnitlessNumber2 = _interopRequireDefault(_isUnitlessNumber);

var _kebabifyStyleName = require('./kebabifyStyleName');

var _kebabifyStyleName2 = _interopRequireDefault(_kebabifyStyleName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var objectToPairs = function objectToPairs(obj) {
  return Object.keys(obj).map(function (key) {
    return [key, obj[key]];
  });
};
var flatten = function flatten(list) {
  return list.reduce(function (memo, x) {
    return memo.concat(x);
  }, []);
};
var stringifyValue = function stringifyValue(key, prop) {
  if (typeof prop === 'number') {
    if (_isUnitlessNumber2.default[key]) {
      return '' + prop; // Forces into a string
    }
    return prop + 'px'; // Adds a px
  }
  return prop;
};

// This generates one ruleset
// With one selector and a set of declarations
var generateCSSRuleset = function generateCSSRuleset(selector, declarations) {
  var prefixedDeclarations = (0, _static2.default)(declarations);
  var prefixedRules = flatten(objectToPairs(prefixedDeclarations).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var key = _ref2[0];
    var value = _ref2[1];

    if (Array.isArray(value)) {
      var _ret = function () {
        // inline-style-prefix-all returns an array when there should be
        // multiple rules, we will flatten to single rules

        var prefixedValues = [];
        var unprefixedValues = [];

        value.forEach(function (v) {
          if (v.indexOf('-') === 0) {
            prefixedValues.push(v);
          } else {
            unprefixedValues.push(v);
          }
        });

        prefixedValues.sort();
        unprefixedValues.sort();

        return {
          v: prefixedValues.concat(unprefixedValues).map(function (v) {
            return [key, v];
          })
        };
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }
    return [[key, value]];
  }));

  var rules = prefixedRules.map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2);

    var key = _ref4[0];
    var value = _ref4[1];

    var stringValue = stringifyValue(key, value);
    return (0, _kebabifyStyleName2.default)(key) + ':' + stringValue + ';';
  }).join('');

  if (rules) {
    return selector + '{' + rules + '}';
  }
  return '';
};

var generate = function generate(selector, object) {
  // Main styles
  var mainStyles = {};
  // Collection of styles that apply to slightly different selectors
  var extraStyles = {};
  // Media styles
  // If one of the keys starts with a @, it is added to mediaStyles
  var mediaStyles = {};

  // Separate main styles from extra styles based on the '&&' character at the
  // beginning
  Object.keys(object).forEach(function (key) {
    if (key[0] === '@') {
      // Media
      mediaStyles[key] = object[key];
    } else if (key.slice(0, 2) === '&&') {
      var appended = key.slice(2);
      extraStyles[appended] = object[key];
    } else {
      mainStyles[key] = object[key];
    }
  });

  var rules = generateCSSRuleset(selector, mainStyles);

  var extraRules = Object.keys(extraStyles).map(function (key) {
    var suffix = key;
    // Keys here are the additions to be added to the className
    return generateCSSRuleset(selector + suffix, extraStyles[key]);
  }).join('');

  var mediaRules = Object.keys(mediaStyles).map(function (key) {
    var media = key;
    var ruleText = generate(selector, mediaStyles[key]);
    return media + '{' + ruleText + '}';
  }).join('');

  return rules + extraRules + mediaRules;
};

exports.default = generate;